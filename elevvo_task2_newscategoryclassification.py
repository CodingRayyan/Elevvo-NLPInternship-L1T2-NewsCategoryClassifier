# -*- coding: utf-8 -*-
"""Elevvo-Task2-NewsCategoryClassification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10NQ1l3bMpvTc2lXfyT9rty2Z8XL43QWO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
import re
from wordcloud import WordCloud

nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('omw-1.4')

train_df = pd.read_csv('train.csv', on_bad_lines='skip')
test_df = pd.read_csv('test.csv', on_bad_lines='skip')

train_df.tail(3)

test_df.tail(3)

df = pd.concat([train_df, test_df], ignore_index=True)

df.tail()

def preprocess_text(text):
    text = str(text)
    text = text.lower()
    text = re.sub(r'[^a-z\s]', '', text)
    words = [lemmatizer.lemmatize(word) for word in text.split() if word not in stop_words]
    return ' '.join(words)

df['clean_text'] = df['text'].apply(preprocess_text)

df[['text', 'clean_text']].head()

le = LabelEncoder()
df['label'] = le.fit_transform(df['Class Index'])
df[['Class Index', 'label']].head()

X = df['clean_text']
y = df['label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer(max_features=10000, ngram_range=(1,2))
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

print("Shape of TF-IDF features:", X_train_tfidf.shape)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

lr = LogisticRegression(multi_class='multinomial', solver='lbfgs', max_iter=1000)
lr.fit(X_train_tfidf, y_train)

y_pred = lr.predict(X_test_tfidf)

print("Classification Report:\n")
print(classification_report(y_test, y_pred, target_names=le.classes_.astype(str)))

cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

from wordcloud import WordCloud
import matplotlib.pyplot as plt

category_names = {1: 'World', 2: 'Sports', 3: 'Business', 4: 'Sci/Tech'}

categories = df['Class Index'].unique()

for cat in categories:
    text = " ".join(df[df['Class Index']==cat]['clean_text'])

    wordcloud = WordCloud(width=800, height=400, background_color='white', max_words=100).generate(text)

    plt.figure(figsize=(10,5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.title(f'Word Cloud for Category {category_names[cat]}')
    plt.show()